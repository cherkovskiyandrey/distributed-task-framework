plugins {
    alias(libs.plugins.spring.boot) apply(false)
    alias(libs.plugins.org.ajoberstar.grgit) apply(false)
}

var grgitPluginId = libs.plugins.org.ajoberstar.grgit.get().pluginId

var localLibraries = subprojects.findAll { !it.name.contains('application') }
var libraries = subprojects.findAll { !it.name.contains('application') && !it.name.contains('commons') }
var apps = subprojects.findAll { it.name.contains('application') }


allprojects {
    group = 'com.distributed_task_framework'
    version = project.properties['version']
    version = version == 'unspecified' ? '1.0-SNAPSHOT' : version

    apply plugin: libs.plugins.spring.boot.get().pluginId
    apply plugin: 'maven-publish'
    apply plugin: 'java-library'

    repositories {
        mavenCentral()
        mavenLocal()
    }

    configurations {
        compileOnly {
            extendsFrom annotationProcessor
        }
    }

    dependencies {
        //dependency management
        implementation platform(libs.spring.boot.bom)

        //Lombok
        compileOnly libs.org.projectlombok.lombok
        annotationProcessor libs.org.projectlombok.lombok
        testCompileOnly libs.org.projectlombok.lombok
        testAnnotationProcessor libs.org.projectlombok.lombok

        //Mapstruct
        implementation libs.org.mapstruct
        annotationProcessor libs.org.mapstruct.processor
        annotationProcessor libs.org.lombok.mapstruct.binding

        //Common tools
        implementation libs.jackson.databind
        implementation libs.guava
        implementation libs.commons.lang3
    }

    java {
        toolchain {
            languageVersion = JavaLanguageVersion.of(17)
        }
        withSourcesJar()
    }

    jar {
        enabled = false
    }

    bootJar {
        enabled = false
    }

    test {
        useJUnitPlatform()
        testLogging {
            exceptionFormat = 'full'
        }
    }
}

configure(localLibraries) { project ->

    jar {
        enabled = true
    }

    test {
        maxHeapSize = "2048m"
        testLogging {
            exceptionFormat = 'full'
        }
    }
}

configure(apps) { project ->
    bootJar {
        enabled = true
    }

    jar {
        enabled = true
    }
}

configure(libraries) { project ->

    apply plugin: grgitPluginId

    publishing {
        publications {
            mavenJava(MavenPublication) {
                from components.java
                var currentTag = grgit.tag.list().find {
                    it.commit.id == grgit.head().getId()
                }
                version = currentTag != null ?
                        currentTag.name :
                        new Date().format('yyyy-MM-dd_HH-mm-ss') + "_" + grgit.head().getId().substring(0, 8)
            }
        }
    }

    build {
        finalizedBy publishToMavenLocal
    }

    jar {
        enabled = true
    }
}

publish {
    dependsOn localLibraries.publish
}

build {
    dependsOn subprojects.build
}
